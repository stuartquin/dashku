// Generated by CoffeeScript 1.3.3
(function() {
  var Gauge, gauge, widget;  
  var listenWebsocket = function(vals){
    var data ={
      current: Math.round(vals.metric),
      min: {
        value: 100,
        text: ""
  		},
  		max: {
        value: 400,
    		text: vals.service
  		}
    };
    
    gauge.update(data);
    gauge.update_labels(data);
  };

  Gauge = (function() {

    function Gauge(widget) {
      this.widget = widget;
      this.d3_widget = d3.select( widget[0] );
      this.width = this.widget.width() * 0.8;
      this.height = this.widget.height() * 0.7;
      this.depth = Math.round(this.height / 4);
      this.gauge = this.d3_widget.select("#gauge").attr("height", this.height);
      this.render_gauge();
      this.render_needle();
      this.range = 180;
      this.offset = 90;
    }

    Gauge.prototype.update = function(data) {
      var current, diff, multiple, value;
      diff = data.max.value - data.min.value;
      current = data.current - data.min.value;
      multiple = this.range / diff;
      value = (current * multiple) - this.offset;

        if ( value < -this.offset ){
        value = -this.offset; 
      }
      if ( value > this.range ){
        value = this.range - this.offset; 
      }
      return this.needle.transition().transition().duration(500).attrTween("transform", d3.tween("rotate(" + value + "," + this.rx + "," + this.ry + ")", d3.interpolateString));
    };

    Gauge.prototype.update_labels = function(data) {
      
      this.d3_widget.select("#current-min .value").text(data.min.value);
      this.d3_widget.select("#current-min .text").text(data.min.text);
      this.d3_widget.select("#current-max .value").text(data.max.value);
      this.d3_widget.select("#current-max .text").text(data.max.text);
      if( data.current == this.d3_widget.select("#current-text").text() ){
          return;
      }

      this.d3_widget.select("#current-text").text(data.current);
    };

    Gauge.prototype.render_gauge = function() {
      var path_str, qx, qy, x1, x2, x3, x4, y1, y2, y3, y4;
      x1 = 0;
      y1 = this.height - this.depth;
      x2 = this.depth;
      y2 = this.height;
      x3 = this.width - this.depth;
      y3 = this.height;
      x4 = this.width;
      y4 = this.height - this.depth;
      qx = Math.round(this.width / 2);
      qy = Math.round(this.depth * 1.8);
      path_str = "M" + x1 + " " + y1 + " ";
      path_str += "L" + x2 + " " + y2 + " ";
      path_str += "Q" + qx + " " + qy + " " + x3 + " " + y3 + " ";
      path_str += "L" + x4 + " " + y4 + " ";
      path_str += "Q" + qx + " 0 " + x1 + " " + y1 + " Z";
            this.gauge.selectAll( "path" ).remove();
this.gauge.append("path").attr("d", path_str).attr("stroke-width", "2").attr("fill", "#444").attr("filter", "url(#inner-shadow)");
      return this.gauge.attr("transform", "translate( 0, -20)");
    };

    Gauge.prototype.render_needle = function() {
      var angle, needle_path, nh, nw, path_str, qx, qy, x1, x2, x3, y1, y2, y3;
      nw = Math.round(this.width / 15);
      nh = Math.round(this.height / 1.6);
      x1 = (this.width / 2) - Math.round(nw / 2);
      y1 = this.height - 10;
      x2 = (this.width / 2) + Math.round(nw / 2);
      y2 = y1;
      qx = Math.round(this.width / 2);
      qy = this.height;
      x3 = Math.round(this.width / 2);
      y3 = this.height - nh;
      needle_path = "M160 20 Q180 0 200 20 L180 100 Z";
      path_str = "M" + x1 + " " + y1 + " ";
      path_str += "Q" + qx + " " + qy + " " + x2 + " " + y2 + " ";
      path_str += "L" + x3 + " " + y3 + " Z";
      angle = -90;
      this.rx = Math.round(this.width / 2);
      this.ry = Math.round(this.height - (qy - y1));
      return this.needle = this.gauge.append("path").attr("d", path_str).attr("stroke-width", "2").attr("fill", "#999").attr("filter", "url(#drop-shadow)").attr("transform", "rotate(" + angle + "," + this.rx + ", " + this.ry + ")");
    };

    return Gauge;

  })();

  gauge = null;

  widget = this.widget;

  this.on("load", function(data) {
    var _this = this;
    head.js("/javascripts/d3.tween.min.js");
    return head.ready(function() {
      gauge = new Gauge(widget);
      ws = new WebSocket("ws://yoshiwara.skimlinks.com:5556/index?subscribe=true&query=service%20%3D%20%22events%2Fsec%22%20and%20host%3D%22allsweverysec%22")
      ws.onmessage = function(ev){
        if (!ev.data){ return; }
        var data = JSON.parse(ev.data);
        listenWebsocket(data);
      }
    	return gauge;
    });
  });

}).call(this);
