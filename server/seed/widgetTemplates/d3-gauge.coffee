module.exports =
  name: "D3 Gauge"
  html: '\n<div id="current-text">\n  0\n</div>\n<svg id="gauge">\n<defs>\n  <filter id="drop-shadow" height="120%">\n    <feGaussianBlur in="SourceAlpha" stdDeviation="2"></feGaussianBlur> <!-- stdDeviation is how much to blur -->\n    <feOffset dx="1" dy="2" result="offsetblur"></feOffset> <!-- how much to offset -->\n    <feMerge>\n      <feMergeNode></feMergeNode> <!-- this contains the offset blurred image -->\n      <feMergeNode in="SourceGraphic"></feMergeNode> <!-- this contains the element that the filter is applied to -->\n   </feMerge>\n  </filter>\n  <filter id="inner-shadow">\n    <!-- Shadow Offset -->\n    <feOffset dx="3" dy="4"></feOffset>\n    <!-- Shadow Blur -->\n    <feGaussianBlur stdDeviation="6" result="offset-blur"></feGaussianBlur>\n    <!-- Invert the drop shadow\n         to create an inner shadow -->\n    <feComposite operator="out" in="SourceGraphic" in2="offset-blur" result="inverse"></feComposite>\n    <!-- Color & Opacity -->\n    <feFlood flood-color="black" flood-opacity="0.85" result="color"></feFlood>\n    <!-- Clip color inside shadow -->\n    <feComposite operator="in" in="color" in2="inverse" result="shadow"></feComposite>\n    <!-- Put shadow over original object -->\n    <feComposite operator="over" in="shadow" in2="SourceGraphic"></feComposite>\n  </filter>\n</defs>\n</svg>\n\n<div id="current-values">\n<div id="current-min">\n  <div class="value">0</div>\n  <div class="text">0</div>\n</div>\n<div id="current-max">\n  <div class="value">0</div>\n  <div class="text">0</div>\n</div>\n  \n</div>\n\n'
  css: 'img {\n  margin-top: 10px;\n}\n\n#current-text {\n margin-top: 12px;\n font-size:  3em;\n color:      #999;\n}\n\n#current-values {\n  width: 90%;\n  margin-left: 5%;\n  margin-top:  -2%;\n  color:       #999;\n}\n\n#current-min {\n  text-align: left;\n  float: left;\n}\n\n#current-min .value{\n  color: #ae432e;\n}\n\n#current-max {\n  text-align: right;\n  float: right;\n}\n\n.text {\n  font-size: 0.85em;\n  color:    #666;\n}\n\n#current-max .value {\n  color: #77ab13;\n}\n\n#gauge {\n  margin-top: -30px; \n  margin-left: 10%;\n}\n\n#message {\n  padding-top: 5px;\n  color: #BD0000;\n  font-size: 10pt;\n}\n'
  script: '// Generated by CoffeeScript 1.3.3\n(function() {\n  var Gauge, gauge, widget;\n\n  Gauge = (function() {\n\n    function Gauge(widget) {\n      this.widget = widget;\n      this.d3_widget = d3.select( widget[0] );\n      this.width = this.widget.width() * 0.8;\n      this.height = this.widget.height() * 0.7;\n      this.depth = Math.round(this.height / 4);\n      this.gauge = this.d3_widget.select("#gauge").attr("height", this.height);\n      this.render_gauge();\n      this.render_needle();\n      this.range = 180;\n      this.offset = 90;\n    }\n\n    Gauge.prototype.update = function(data) {\n      var current, diff, multiple, value;\n      diff = data.max.value - data.min.value;\n      current = data.current - data.min.value;\n      multiple = this.range / diff;\n      value = (current * multiple) - this.offset;\n\n        if ( value < -this.offset ){\n        value = -this.offset; \n      }\n      if ( value > this.range ){\n        value = this.range - this.offset; \n      }\n      return this.needle.transition().transition().duration(1000).attrTween("transform", d3.tween("rotate(" + value + "," + this.rx + "," + this.ry + ")", d3.interpolateString));\n    };\n\n    Gauge.prototype.update_labels = function(data) {\n      \n      this.d3_widget.select("#current-min .value").text(data.min.value);\n      this.d3_widget.select("#current-min .text").text(data.min.text);\n      this.d3_widget.select("#current-max .value").text(data.max.value);\n      this.d3_widget.select("#current-max .text").text(data.max.text);\n      this.d3_widget.select("#current-text").style("opacity", 0).transition().duration(800).style("opacity", 1).text(data.current);\n    };\n\n    Gauge.prototype.render_gauge = function() {\n      var path_str, qx, qy, x1, x2, x3, x4, y1, y2, y3, y4;\n      x1 = 0;\n      y1 = this.height - this.depth;\n      x2 = this.depth;\n      y2 = this.height;\n      x3 = this.width - this.depth;\n      y3 = this.height;\n      x4 = this.width;\n      y4 = this.height - this.depth;\n      qx = Math.round(this.width / 2);\n      qy = Math.round(this.depth * 1.8);\n      path_str = "M" + x1 + " " + y1 + " ";\n      path_str += "L" + x2 + " " + y2 + " ";\n      path_str += "Q" + qx + " " + qy + " " + x3 + " " + y3 + " ";\n      path_str += "L" + x4 + " " + y4 + " ";\n      path_str += "Q" + qx + " 0 " + x1 + " " + y1 + " Z";\n      this.gauge.append("path").attr("d", path_str).attr("stroke-width", "2").attr("fill", "#444").attr("filter", "url(#inner-shadow)");\n      return this.gauge.attr("transform", "translate( 0, -20)");\n    };\n\n    Gauge.prototype.render_needle = function() {\n      var angle, needle_path, nh, nw, path_str, qx, qy, x1, x2, x3, y1, y2, y3;\n      nw = Math.round(this.width / 15);\n      nh = Math.round(this.height / 1.6);\n      x1 = (this.width / 2) - Math.round(nw / 2);\n      y1 = this.height - 10;\n      x2 = (this.width / 2) + Math.round(nw / 2);\n      y2 = y1;\n      qx = Math.round(this.width / 2);\n      qy = this.height;\n      x3 = Math.round(this.width / 2);\n      y3 = this.height - nh;\n      needle_path = "M160 20 Q180 0 200 20 L180 100 Z";\n      path_str = "M" + x1 + " " + y1 + " ";\n      path_str += "Q" + qx + " " + qy + " " + x2 + " " + y2 + " ";\n      path_str += "L" + x3 + " " + y3 + " Z";\n      angle = -90;\n      this.rx = Math.round(this.width / 2);\n      this.ry = Math.round(this.height - (qy - y1));\n      return this.needle = this.gauge.append("path").attr("d", path_str).attr("stroke-width", "2").attr("fill", "#999").attr("filter", "url(#drop-shadow)").attr("transform", "rotate(" + angle + "," + this.rx + ", " + this.ry + ")");\n    };\n\n    return Gauge;\n\n  })();\n\n  gauge = null;\n\n  widget = this.widget;\n\n  this.on("load", function(data) {\n    var _this = this;\n    head.js("/javascripts/d3.js");\n    return head.ready(function() {\n      console.log( widget );\n      return gauge = new Gauge(widget);\n    });\n  });\n\n  this.on("transmission", function(data) {\n    gauge.update(data);\n    return gauge.update_labels(data);\n  });\n\n}).call(this);\n'
  json: '{\n  "current": 150,\n  "min": {\n    "value": 65,\n    "text": "Min Per Day"\n  },\n  "max": {\n    "value": 200,\n    "text": "Max Per Day"\n  }\n}\n'
  snapshotUrl: "/images/widgetTemplates/d3BulletImg.png"
